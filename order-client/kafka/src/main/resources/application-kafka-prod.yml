# ======================================================================
# application-kafka-prod.yml
#  - 운영(MSK/IAM) 환경 예시
#  - "enable 스위치"로 생산자/소비자 모듈을 명시적으로 켜고 끔
#  - BOOTSTRAP_SERVERS 는 운영 환경변수로 주입
# ======================================================================

kafka:
  # ------------------------------------------------------------------
  # 공통 SSL/SASL (MSK IAM 인증)
  # - ssl.enabled=true 일 때만 KafkaClient에 아래 설정 주입
  # ------------------------------------------------------------------
  ssl:
    enabled: true
    security-protocol: SASL_SSL
    sasl-mechanism: AWS_MSK_IAM
    sasl-jaas-config: software.amazon.msk.auth.iam.IAMLoginModule required;
    sasl-client-callback-handler-class: software.amazon.msk.auth.iam.IAMClientCallbackHandler

  # ------------------------------------------------------------------
  # 프로듀서
  #  - enabled=true : KafkaTemplate/ProducerFactory 생성
  #  - bootstrap-servers 는 필수(검증됨)
  #  - JsonSerializer + LZ4 + batch.size(65536)는 코드에서 기본 적용됨
  # ------------------------------------------------------------------
  producer:
    enabled: true
    bootstrap-servers: "${BOOTSTRAP_SERVERS}"

  # ------------------------------------------------------------------
  # 토픽 매핑
  #  - 서비스 도메인별 토픽 이름 정의
  #  - region 이 필요한 경우 `regionCode:` 키를 항목에 추가하면 됨
  #    예) regionCode: AP_NORTHEAST_2
  # ------------------------------------------------------------------
  topic:
    - category: ORDER_LOCAL
      name: "local-order-local"
    - category: ORDER_API
      name: "local-order-api"
    - category: ORDER_CRUD
      name: "local-order-crud"
    - category: ORDER_REMOTE
      name: "local-order-remote"
    - category: ORDER_DLQ
      name: "local-order-dead-letter"
    - category: ORDER_ALARM
      name: "local-order-alarm"

  # ------------------------------------------------------------------
  # 컨슈머
  #  - enabled=true : ListenerContainerFactory 생성(@EnableKafka 포함)
  #  - bootstrap-servers 는 필수(검증됨)
  #  - ackMode=MANUAL_IMMEDIATE 이므로, 리스너에서 ack.acknowledge() 호출 필요
  #  - 옵션 값은 운영 트래픽/소비 패턴에 맞게 조절
  # ------------------------------------------------------------------
  consumer:
    enabled: true
    bootstrap-servers: "${BOOTSTRAP_SERVERS}"

    option:
      # 실패 허용 횟수(업무 정책에 맞춰 조정)
      max-fail-count: 1

      # 한 번에 가져올 레코드 수(배치 리스너에서 특히 중요)
      max-poll-records: 1000

      # fetch 대기 시간 / 바이트 사이즈(네트워크/처리량 기준으로 튜닝)
      fetch-max-wait-ms: 500
      fetch-max-bytes: 52428800            # 50 MiB

      # poll 간 최대 유휴 시간(이 시간 초과 시 리밸런싱)
      max-poll-interval-ms: 300000         # 5분

      # poll 간 대기(고부하 환경에서 너무 낮으면 CPU 사용↑)
      idle-between-polls: 0

      # 오프셋 초기 위치 (신규 그룹: earliest부터 풀스캔)
      auto-offset-reset: "earliest"

      # 자동 커밋 사용 안 함(수동 ack 정책과 일치)
      enable-auto-commit: false
