# ===== Server =====
server:
  shutdown: graceful

# ===== Spring =====
spring:
  config:
    activate:
      on-profile: local

  lifecycle:
    timeout-per-shutdown-phase: 30s

  jpa:
    hibernate:
      ddl-auto: validate
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
        dialect.storage_engine: innodb
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        default_batch_fetch_size: ${chunkSize:1000}
        connection.provider_disables_autocommit: true
        jdbc.batch_size: ${chunkSize:1000}
        highlight_sql: true
        use_sql_comments: true
        jdbc.time_zone: UTC
        timezone.default_storage: NORMALIZE
        order_updates: true
        order_inserts: true
        jdbc.batch_versioned_data: true
        show-sql: true

  sql:
    init:
      mode: never

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    out-of-order: false
    connect-retries: 10
    clean-disabled: false

  datasource:
    url: jdbc:mysql://localhost:3306/order_local?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true&useSSL=false
    username: order
    password: order1234
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 3000
      max-lifetime: 58000
      maximum-pool-size: 16
      auto-commit: false
      data-source-properties:
        connectTimeout: 3000
        socketTimeout: 60000
        useUnicode: true
        characterEncoding: utf-8
        serverTimezone: UTC
        rewriteBatchedStatements: true

  redis:
    enabled: false
    # 1) URI 우선 (TLS는 rediss://)
    # uri: rediss://my-redis.example.com:6380
    # 2) 없으면 host/port
    host: localhost
    port: 6379
    database: 0
    # password: your-pass

    # (선택) clientName 설정/추론
    # client-name: my-app-redis
    # enable-default-client-name: true
    # default-client-name: order-core

    # 직렬화 신뢰 패키지
    trusted-package: org.example.order

    # 타임아웃/풀 설정
    command-timeout-seconds: 3
    shutdown-timeout-seconds: 3
    pool-max-active: 32
    pool-max-idle: 16
    pool-min-idle: 8
    pool-max-wait: 2000

jpa:
  enabled: true

aws:
  region: ap-northeast-2
  endpoint: http://localhost:4566
  credential:
    enabled: true
    access-key: local
    secret-key: local
  s3:
    enabled: true
    bucket: my-local-bucket
    default-folder: logs
  secrets-manager:
    enabled: true
    secret-name: myapp/secret-key
    scheduler-enabled: true
    refresh-interval-millis: 300000
    fail-fast: true

dynamodb:
  enabled: false
  region: ${aws.region}
  endpoint: ${aws.endpoint}
  access-key: ${aws.credential.access-key}
  secret-key: ${aws.credential.secret-key}
  table-name: order_dynamo
  # 필요하면 환경별로 자유롭게 오버라이드 (예: dev는 별도 리전/엔드포인트)
  # region: ap-southeast-1
  # endpoint: https://dynamodb.ap-southeast-1.amazonaws.com
  # access-key: dev-xxx
  # secret-key: dev-yyy

lock:
  redisson:
    enabled: false
    address: redis://${spring.redis.host}:${spring.redis.port}
    database: 10
    wait-time: 3000
    lease-time: 10000
    retry-interval: 150

  named:
    enabled: false
    wait-time: 3000
    retry-interval: 150

crypto:
  enabled: false
  props:
    seed: false

encrypt:
  enabled: false
  aes128:
    key: dGhpc2lzMTZieXRla2V5IQ==                       # AES-128 CBC용 (16바이트)
  aes256:
    key: bXlTZWNyZXRLZXlTMjU2MjU2MjU2MjU2MjU2MjU2MjU=   # AES-256 CBC용 (32바이트)
  aesgcm:
    key: bXlTMzJiYnl0ZXNnY21rZXlzdXBlcnNlY3JldGtleTE=   # AES-GCM 256용 (32바이트)
  hmac:
    key: test-hmac-secret                               # HMAC-SHA256용 (32바이트)

kafka:
  enabled: true
  ssl:
    enabled: false
    security-protocol: SASL_SSL
    sasl-mechanism: AWS_MSK_IAM
    sasl-jaas-config: software.amazon.msk.auth.iam.IAMLoginModule required;
    sasl-client-callback-handler-class: software.amazon.msk.auth.iam.IAMClientCallbackHandler

  producer:
    enabled: true
    bootstrap-servers: localhost:29092
    # (선택) 필요 시 코드 확장해 아래 속성도 바인딩 가능
    # acks: all
    # linger-ms: 5
    # batch-size: 65536

  topic:
    - category: ORDER_LOCAL
      name: "local-order-local"
    - category: ORDER_API
      name: "local-order-api"
    - category: ORDER_CRUD
      name: "local-order-crud"
    - category: ORDER_REMOTE
      name: "local-order-remote"
    - category: ORDER_DLQ
      name: "local-order-dead-letter"
    - category: ORDER_ALARM
      name: "local-order-alarm"

  consumer:
    enabled: true
    bootstrap-servers: localhost:29092
    option:
      max-fail-count: 1
      max-poll-records: 1000
      fetch-max-wait-ms: 500
      fetch-max-bytes: 52428800
      max-poll-interval-ms: 300000
      idle-between-polls: 0
      auto-offset-reset: "earliest"
      enable-auto-commit: false

# ===== Logging =====
logging:
  file:
    path: /app/logs
  level:
    org.example: debug
    org.hibernate.orm.jdbc.bind: debug
