// ===== 플러그인 =====
plugins {
    id 'java'
    id 'idea'
}

// ===== 그룹/버전 =====
group = 'org.example'
version = '1.0.0'

// ===== 자바 설정 =====
java {
    toolchain { languageVersion = JavaLanguageVersion.of(17) }
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

// ===== 소스셋 =====
sourceSets {
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }

    integrationTest {
        java.srcDir 'src/integrationTest/java'
        resources.srcDir 'src/integrationTest/resources'

        compileClasspath += sourceSets.main.output + sourceSets.main.runtimeClasspath + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath + sourceSets.main.runtimeClasspath
    }
}

// ===== IntelliJ IDEA 보조 설정 =====
idea {
    module {
        testSourceDirs += file('src/integrationTest/java')
        testResourceDirs += file('src/integrationTest/resources')
    }
}

// ===== 의존성(버전 카탈로그) =====
dependencies {
    // ==== 프로젝트 모듈 ====
    implementation(project(':order-common'))
    implementation(project(':order-domain'))

    // ==== main ====
    implementation(libs.springBootStarter)
    implementation(libs.springBootStarterAop)
    implementation(libs.springBootStarterJdbc)
    implementation(libs.springBootStarterSecurity)
    implementation(libs.springBootStarterDataJpa)

    // Gateway(GlobalFilter 등) — 컴파일만 필요
    compileOnly(libs.springCloudGateway)

    // JWT
    implementation(libs.jjwtApi)
    runtimeOnly(libs.jjwtImpl)
    runtimeOnly(libs.jjwtJackson)

    // Servlet API — 필터/서블릿 타입
    compileOnly(libs.jakartaServlet)

    // Redis 수동/자동 구성에서 사용하는 타입들
    implementation(libs.lettuce)
    implementation(libs.commonsPool2)
    implementation(libs.redisson)

    // Argon2 해싱
    implementation(libs.argon2)

    // AWS SDK (SecretsManager, DynamoDB)
    implementation(platform(libs.awsBomV2))
    implementation(libs.awsSecretsManager)
    implementation(libs.awsRegions)
    implementation(libs.awsAuth)

    // DynamoDB (메인 코드에서 EnhancedClient/TableSchema 등 사용)
    implementation(libs.awsDynamodb)
    implementation(libs.awsDynamodbEnhanced)

    // ===== QueryDSL (Jakarta 강제) =====
    implementation(libs.querydslCore)
    implementation("${libs.querydslJpaJakarta.get().module}:${libs.querydslJpaJakarta.get().version}:jakarta")

    // @ConfigurationProperties 메타 생성
    annotationProcessor(libs.springBootConfigProcessor)

    // Lombok (main/test)
    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)

    // ==== test (unit) ====
    testImplementation(libs.springBootStarterTest)
    testImplementation(libs.h2)
    testImplementation(libs.springBootStarterJdbc)
    testImplementation(libs.embeddedRedis)
    testImplementation(libs.springBootStarterDataRedis)
    testImplementation(libs.redisson)

    // ==== integrationTest (통합 테스트 전용) ====
    // Testcontainers (JDBC URL 방식으로 DataSource 자동 생성)
    integrationTestImplementation(platform(libs.testcontainersBom))
    integrationTestImplementation(libs.testcontainers)
    integrationTestImplementation(libs.testcontainersJunit)
    integrationTestImplementation(libs.testcontainersMysql)
    integrationTestImplementation(libs.testcontainersJdbc)

    // MySQL 드라이버: 런타임 클래스패스 보장 (CNF 방지)
    integrationTestImplementation(libs.mysqlDriver)
    integrationTestRuntimeOnly(libs.mysqlDriver)

    // LocalStack (DynamoDB)
    integrationTestImplementation(libs.testcontainersLocalstack)

    // LocalStack + DynamoDB SDK v2
    integrationTestImplementation(platform(libs.awsBomV2))
    integrationTestImplementation(libs.awsDynamodb)
    integrationTestImplementation(libs.awsRegions)

    // Redisson 코어를 통합테스트에 직접 추가 (오토컨피그 배제 환경에서 사용)
    integrationTestImplementation(libs.redissonCore)

    // Lombok 을 integrationTest에도 명시적으로 연결 (컴파일 + 어노테이션 프로세서)
    integrationTestCompileOnly(libs.lombok)
    integrationTestAnnotationProcessor(libs.lombok)
}

// ===== 구성 상속/제외(Configurations) =====
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

    testCompileClasspath {
        exclude group: 'org.redisson', module: 'redisson-spring-boot-starter'
    }
    testRuntimeClasspath {
        exclude group: 'org.redisson', module: 'redisson-spring-boot-starter'
    }
}

// ===== 리소스 처리(중복 제외) =====
tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.named('processTestResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.matching { it.name == 'processIntegrationTestResources' }.configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// ===== 테스트 태스크 공통 =====
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat "FULL"
        showExceptions true
        showStackTraces true
    }
}

test {
    systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "test-unit")
    systemProperty "junit.jupiter.execution.parallel.enabled", "true"
    systemProperty "junit.jupiter.execution.parallel.mode.default", "concurrent"
}

// ===== integrationTest 태스크(존재 시 보강/없으면 등록) =====
if (tasks.findByName('integrationTest') != null) {
    tasks.named('integrationTest', Test) {
        description = 'Runs integration tests (Testcontainers: MySQL/LocalStack DynamoDB).'
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()

        systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "integration")
        systemProperty "junit.jupiter.execution.parallel.enabled", "false"

        shouldRunAfter tasks.named('test')

        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }
} else {
    tasks.register('integrationTest', Test) {
        description = 'Runs integration tests (Testcontainers: MySQL/LocalStack DynamoDB).'
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()

        systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "integration")
        systemProperty "junit.jupiter.execution.parallel.enabled", "false"

        shouldRunAfter tasks.named('test')

        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }
}

// ===== 빌드 파이프라인 마무리 =====
check.dependsOn test
