spring:
  jpa:
    open-in-view: false
    hibernate.ddl-auto: none
    properties:
      hibernate:
        dialect.storage_engine: innodb
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        default_batch_fetch_size: ${chunkSize:1000}
        connection.provider_disables_autocommit: true
        jdbc.batch_size: ${chunkSize:1000}
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
        jdbc.time_zone: UTC
        timezone.default_storage: NORMALIZE
        order_updates: true
        order_inserts: true
        jdbc.batch_versioned_data: true

  config.activate.on-profile: prod
  datasource:
    url: jdbc:mysql://${DB_ENDPOINT}/order
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: software.aws.rds.jdbc.mysql.Driver
    hikari:
      connection-timeout: 3000
      max-lifetime: 58000  # 58s
      maximum-pool-size: 64
      auto-commit: false
      data-source-properties:
        connectTimeout: 3000
        socketTimeout: 60000
        useUnicode: true
        characterEncoding: utf-8
        serverTimezone: UTC
        rewriteBatchedStatements: true
  cloud:
    gateway:
      default-filters:
        - name: JwtAuthenticationGlobalFilter

      routes:
        - id: auth-service
          uri: http://auth-service.default.svc.cluster.local
          predicates:
            - Path=/api/v1/auth/**
        - id: user-service
          uri: http://user-service.default.svc.cluster.local
          predicates:
            - Path=/api/v1/users/**
        - id: order-service
          uri: http://order-service.default.svc.cluster.local
          predicates:
            - Path=/api/v1/orders/**

custom:
  security:
    whitelist:
      - /api/v1/auth/**
      - /swagger-ui/**
      - /v3/api-docs/**
      - /actuator/health

  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD}
    timeout: 3000ms
    trusted-package: org.example.order
    lettuce:
      pool:
        max-active: 64       # 동시에 사용할 수 있는 최대 커넥션 수
        max-idle: 32         # idle 상태로 유지할 수 있는 커넥션 수
        min-idle: 8          # 최소 idle 커넥션 수 확보 (예열 용도)
        max-wait: 2000ms     # 커넥션 풀에서 커넥션을 기다릴 수 있는 최대 시간

aws:
  dynamodb:
    endpoint: https://dynamodb.ap-northeast-2.amazonaws.com
    region: ap-northeast-2
    accessKey: test
    secretKey: test

  secrets-manager:
    region: ap-northeast-2          # AWS 리전 (예: 서울 리전)
    secret-name: myapp/secret-key    # 저장한 Secret 이름
    refresh-interval-millis: 300000  # 키 갱신 주기 (5분 = 300,000ms)

lock:
  redisson:
    address: redis://localhost:6379
    password: # 선택
    database: 0
    wait-time: 3000
    lease-time: 10000

  named:
    wait-time: 5000       # milliseconds
    retry-interval: 100   # 재시도 간격 (ex: 100ms)

security:
  jwt:
    secret: ZGVtb19iYXNlNjRfc2VjcmV0X3Rva2VuX2tleQ==
    access-token-validity: 900000   # 15 minutes (in ms)
    refresh-token-validity: 1209600000 # 14 days (in ms)
    header: Authorization
    prefix: Bearer

  oauth2:
    client:
      registration:
        google:
          client-id: YOUR_GOOGLE_CLIENT_ID
          client-secret: YOUR_GOOGLE_CLIENT_SECRET
          scope: profile, email
          redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
          client-name: Google
        kakao:
          client-id: YOUR_KAKAO_REST_API_KEY
          client-secret: YOUR_KAKAO_CLIENT_SECRET  # 카카오에서는 보통 생략 가능
          client-authentication-method: client_secret_post
          authorization-grant-type: authorization_code
          redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
          scope: profile_nickname, account_email
          client-name: Kakao
      provider:
        kakao:
          authorization-uri: https://kauth.kakao.com/oauth/authorize
          token-uri: https://kauth.kakao.com/oauth/token
          user-info-uri: https://kapi.kakao.com/v2/user/me
          user-name-attribute: id

custom:
  security:
    whitelist:
      - /api/v1/auth/**
      - /swagger-ui/**
      - /v3/api-docs/**
      - /actuator/health
  oauth2:
    server:
      issuer-uri: https://provider.com
      public-key-location: classpath:oauth2/public.pem  # JWT 검증용 공개키
    client:
      client-id: your-client-id
      client-secret: your-client-secret
      scopes:
        - read
        - write
    jwt:
      secret: your-jwt-secret-key
      access-token-validity-seconds: 3600       # 1시간
      refresh-token-validity-seconds: 1209600   # 14일

encrypt:
  kms-region: ap-northeast-2
  aes128:
    key: ${AES128_KEY} #(16 bytes)
  aes256:
    key: ${AES256_KEY} # 32 bytes
  aesgcm:
    key: ${AESGCM_KEY} # 32 bytes
  hmac:
    key: ${HMAC_KEY}   # 32 bytes
