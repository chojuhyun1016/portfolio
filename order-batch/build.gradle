// ===== 플러그인 =====
plugins {
    id 'java'
    id 'idea'
}

group = 'org.example'
version = '1.0.0'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(17) }
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

// ===== 소스셋 =====
sourceSets {
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
    integrationTest {
        java.srcDir 'src/integrationTest/java'
        resources.srcDir 'src/integrationTest/resources'

        compileClasspath += sourceSets.main.output + configurations.runtimeClasspath + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

idea {
    module {
        testSourceDirs += file('src/integrationTest/java')
        testResourceDirs += file('src/integrationTest/resources')
        downloadSources = true
        downloadJavadoc = true
    }
}

dependencies {
    // ===== 프로젝트 모듈 =====
    implementation(project(':order-common'))
    implementation(project(':order-domain'))
    implementation(project(':order-contracts'))
    implementation(project(':order-core'))
    implementation(project(':order-client:web'))
    implementation(project(':order-client:kafka'))
    implementation(project(':order-client:s3'))

    // ===== Spring Boot AutoConfiguration (워커 기준 추가) =====
    compileOnly(libs.springBootAutoconfigure)
    annotationProcessor(libs.springBootConfigProcessor)

    // ===== Spring Core =====
    implementation(libs.springBootStarter)
    implementation(libs.springBootStarterActuator)
    implementation(libs.springBootStarterBatch)
    implementation(libs.springBootStarterWeb)
    implementation(libs.springBootStarterDataJpa)
    implementation(libs.springBootStarterValidation)

    // ===== Kafka =====
    implementation(libs.springKafka)

    // ===== Data/JPA/Querydsl =====
    implementation(libs.querydslCore)
    implementation("${libs.querydslJpaJakarta.get().module}:${libs.querydslJpaJakarta.get().version}:jakarta")
    annotationProcessor("${libs.querydslApt.get().module}:${libs.versions.querydsl.get()}:jakarta")
    annotationProcessor(libs.jakartaPersistenceApi)

    // ===== 직렬화/로깅 =====
    implementation(libs.jacksonDatabind)
    implementation(libs.jacksonJsr310)
    implementation(libs.logbackJsonClassic)
    implementation(libs.logbackJackson)
    implementation(libs.logstashLogbackEncoder)

    // ===== AWS (MSK IAM, S3 v1, MySQL JDBC) =====
    implementation(libs.awsMskIamAuth)
    implementation(libs.awsS3v1)
    runtimeOnly(libs.awsMysqlJdbc)

    // ===== AWS SDK v2 BOM + Secrets Manager =====
    implementation(platform(libs.awsBomV2))
    implementation(libs.awsSecretsManager)

    // ===== JAXB (워커 기준 추가: 일부 환경에서 필요) =====
    implementation(libs.jaxbApi)

    // ===== Lombok =====
    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)

    // ===== Unit Test =====
    testImplementation(libs.springBootStarterTest)
    testImplementation(libs.springKafkaTest)
    testRuntimeOnly(libs.h2)
    testImplementation(libs.springBatchTest)

    // ===== Integration Test =====
    configurations.integrationTestImplementation.extendsFrom configurations.testImplementation
    configurations.integrationTestRuntimeOnly.extendsFrom configurations.testRuntimeOnly

    integrationTestImplementation(libs.springBootStarterTest)
    integrationTestImplementation(libs.springKafkaTest)

    // Testcontainers
    integrationTestImplementation(platform(libs.testcontainersBom))
    integrationTestImplementation(libs.testcontainers)
    integrationTestImplementation(libs.testcontainersJunit)
    integrationTestImplementation(libs.testcontainersMysql)
    integrationTestImplementation(libs.testcontainersJdbc)
    integrationTestRuntimeOnly(libs.mysqlDriver)

    integrationTestCompileOnly(libs.lombok)
    integrationTestAnnotationProcessor(libs.lombok)

    // ===== Netty macOS 네이티브 DNS (Apple Silicon/x86, 워커 기준 추가) =====
    runtimeOnly("io.netty:netty-resolver-dns-native-macos:${libs.versions.netty.get()}:osx-aarch_64")
    runtimeOnly("io.netty:netty-resolver-dns-native-macos:${libs.versions.netty.get()}:osx-x86_64")
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.named('processTestResources') { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
tasks.matching { it.name == 'processIntegrationTestResources' }.configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat "FULL"
        showExceptions true
        showStackTraces true
    }
}

test {
    systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "test-unit")
    systemProperty "junit.jupiter.execution.parallel.enabled", "true"
    systemProperty "junit.jupiter.execution.parallel.mode.default", "concurrent"
}

// integrationTest 태스크
def hasIntegrationTask = tasks.findByName('integrationTest') != null

if (hasIntegrationTask) {
    tasks.named('integrationTest', Test) {
        description = 'Runs integration tests (EmbeddedKafka; Testcontainers optional).'
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
        systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "integration")
        systemProperty "junit.jupiter.execution.parallel.enabled", "false"
        shouldRunAfter tasks.named('test')
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }
} else {
    tasks.register('integrationTest', Test) {
        description = 'Runs integration tests (EmbeddedKafka; Testcontainers optional).'
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
        systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "integration")
        systemProperty "junit.jupiter.execution.parallel.enabled", "false"
        shouldRunAfter tasks.named('test')
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }
}

// 파이프라인 의존성
check.dependsOn test
