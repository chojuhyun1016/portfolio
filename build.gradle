plugins {
    alias(libs.plugins.springBoot) apply false
    alias(libs.plugins.springDepMgmt) apply false
    alias(libs.plugins.asciidoctor) apply false
}

group = "org.example"
version = "1.0.0"

subprojects {
    apply plugin: "java-library"
    apply plugin: libs.plugins.springDepMgmt.get().pluginId
    // ✅ (요청사항 반영) java-test-fixtures 미사용

    java {
        toolchain { languageVersion = JavaLanguageVersion.of(libs.versions.java.get().toInteger()) }
        withSourcesJar()
        withJavadocJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = libs.versions.java.get().toInteger()
    }

    // Javadoc 빌드 완화
    tasks.withType(Javadoc).configureEach {
        options.encoding = "UTF-8"
        options.addStringOption("Xdoclint:none", "-quiet")
        failOnError = false
    }

    // 리소스 중복 방지 (test/integrationTest 모두 포함)
    tasks.withType(ProcessResources).configureEach {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }

    dependencies {
        // 공통 유틸
        implementation(libs.guava)

        // Lombok (main/test 공통)
        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
        testCompileOnly(libs.lombok)
        testAnnotationProcessor(libs.lombok)

        // 공통 테스트
        testImplementation(libs.springBootStarterTest)
        testImplementation(platform(libs.testcontainersBom))
    }

    // ===== BOM =====
    dependencyManagement {
        // ✅ 버전 관리는 "루트에서 가져온 BOM" + "libs.versions.toml 별칭" 중심으로 통일
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${libs.versions.springBoot.get()}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${libs.versions.springCloud.get()}"
            mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${libs.versions.springAws.get()}"
        }
    }

    // ===== 통합 테스트 소스셋/태스크 (공통) =====
    sourceSets {
        integrationTest {
            java.srcDir file("src/integrationTest/java")
            resources.srcDir file("src/integrationTest/resources")

            // ✅ [중요] test 산출물(TestBootApp 등)을 **제외**하여 @SpringBootConfiguration 충돌 방지
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
        }
    }

    configurations {
        // test 구성을 integrationTest에 상속
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

        // Lombok 확장 (없으면 @Slf4j 인식 실패)
        integrationTestCompileOnly.extendsFrom testCompileOnly
        integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
    }

    tasks.register("integrationTest", Test) {
        description = "Runs integration tests."
        group = "verification"
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
        shouldRunAfter tasks.named("test")
        // ✅ 통합 테스트 기본 프로파일
        systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "integration")
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }
}
