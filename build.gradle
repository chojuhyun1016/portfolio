plugins {
    alias(libs.plugins.springBoot) apply false
    alias(libs.plugins.springDepMgmt) apply false
    alias(libs.plugins.asciidoctor) apply false
}

group = "org.example"
version = "1.0.0"

subprojects {
    // ===== 공통 플러그인 설정 =====
    apply plugin: "java-library"
    apply plugin: libs.plugins.springDepMgmt.get().pluginId

    java {
        toolchain { languageVersion = JavaLanguageVersion.of(libs.versions.java.get().toInteger()) }
        withSourcesJar()
        withJavadocJar()
    }

    // ===== 컴파일/문서화 설정 =====
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = libs.versions.java.get().toInteger()
    }

    tasks.withType(Javadoc).configureEach {
        options.encoding = "UTF-8"
        options.addStringOption("Xdoclint:none", "-quiet")
        failOnError = false
    }

    tasks.withType(ProcessResources).configureEach {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    // ===== 테스트 설정 =====
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }

    // ===== 공통 의존성 =====
    dependencies {
        implementation(libs.guava)

        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
        testCompileOnly(libs.lombok)
        testAnnotationProcessor(libs.lombok)

        testImplementation(libs.springBootStarterTest)
        testImplementation(platform(libs.testcontainersBom))
    }

    // ===== BOM 설정 =====
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${libs.versions.springBoot.get()}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${libs.versions.springCloud.get()}"
            mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${libs.versions.springAws.get()}"
        }
    }

    // ===== 통합 테스트 소스셋 설정 =====
    sourceSets {
        integrationTest {
            java.srcDir file("src/integrationTest/java")
            resources.srcDir file("src/integrationTest/resources")

            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

        integrationTestCompileOnly.extendsFrom testCompileOnly
        integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
    }

    // ===== 통합 테스트 태스크 등록 =====
    tasks.register("integrationTest", Test) {
        description = "Runs integration tests."
        group = "verification"
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
        shouldRunAfter tasks.named("test")

        systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "integration")
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }
}
