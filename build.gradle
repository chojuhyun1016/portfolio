plugins {
    alias(libs.plugins.springBoot) apply false
    alias(libs.plugins.springDepMgmt) apply false
    alias(libs.plugins.asciidoctor) apply false
}

group = "org.example"
version = "1.0.0"

subprojects {
    apply plugin: "java-library"
    apply plugin: libs.plugins.springDepMgmt.get().pluginId

    java {
        toolchain { languageVersion = JavaLanguageVersion.of(libs.versions.java.get().toInteger()) }
        withSourcesJar()
        withJavadocJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = libs.versions.java.get().toInteger()
    }

    // Javadoc 빌드 완화(에러 무시 + doclint 비활성화 + UTF-8)
    tasks.withType(Javadoc).configureEach {
        options.encoding = "UTF-8"
        options.addStringOption("Xdoclint:none", "-quiet")
        failOnError = false
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events "FAILED", "SKIPPED"
            exceptionFormat "FULL"
        }
    }

    dependencies {
        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
        testCompileOnly(libs.lombok)
        testAnnotationProcessor(libs.lombok)

        // 공통 테스트/유틸
        testImplementation(libs.springBootStarterTest)
        testImplementation(platform(libs.testcontainersBom))
        testImplementation(platform(libs.mockitoBom))
        implementation(libs.guava)
    }

    // === BOM 추가 (순서 중요) ===
    dependencyManagement {
        imports {
            // 1) Spring Boot BOM (스타터/스프링 생태계 버전 확정)
            mavenBom "org.springframework.boot:spring-boot-dependencies:${libs.versions.springBoot.get()}"

            // 2) Spring Cloud / AWS BOM (필요 시)
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${libs.versions.springCloud.get()}"
            mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${libs.versions.springAws.get()}"
        }
    }
}

// 실행 모듈에서만 spring-boot 적용할 때 사용 (예시)
// configure([
//     project(":order-api:order-api-master"),
//     project(":order-api:order-api-web"),
//     project(":order-worker"),
//     project(":order-batch")
// ]) {
//     apply plugin: libs.plugins.springBoot.get().pluginId
// }

// (선택) REST Docs 샘플 — 주석 해제 시 대상 모듈에만 적용
// configure([project(":order-api:order-api-master")]) {
//     apply plugin: libs.plugins.asciidoctor.get().pluginId
//     configurations { asciidoctorExt }
//     dependencies { asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor" }
//     tasks.named("asciidoctor") {
//         dependsOn(tasks.named("test"))
//         inputs.dir("src/docs/asciidoc")
//         baseDirFollowsSourceFile()
//     }
//     tasks.named("bootJar") {
//         dependsOn(tasks.named("asciidoctor"))
//         from("${buildDir}/docs/asciidoc") { into("static/docs") }
//     }
// }


// REST Docs 설정
//def restDocProjects = [project(':order-api:order-api-master')]
//configure(restDocProjects) {
//    apply plugin: "org.asciidoctor.jvm.convert"
//
//    configurations {
//        asciidoctorExt
//    }
//
//    asciidoctor {
//        configurations 'asciidoctorExt'
//        dependsOn test
//        baseDirFollowsSourceFile()
//    }
//
//    bootJar {
//        dependsOn asciidoctor
//        from("${asciidoctor.outputDir}/") {
//            into 'static/docs'
//        }
//    }
//
//    dependencies {
//        asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
//        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
//    }
//}
