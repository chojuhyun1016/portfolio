# ======================================================================
# gradle/libs.versions.toml
#  - 버전/의존성 카탈로그 (프로젝트 전역)
#  - ✅ springKafka, springBootStarterWebflux 별칭 추가
#  - 기존 주석/항목 그대로 유지 + 필요한 항목만 보강
# ======================================================================

[versions]
java = "17"
springBoot = "3.2.5"
springDepMgmt = "1.1.4"
springCloud = "2023.0.1"
springAws = "3.1.1"
querydsl = "5.0.0"

guava = "32.1.2-jre"
tsid = "5.2.6"
jacksonJsr310 = "2.17.2"
mysqlDriver = "8.3.0"
awsMysqlJdbc = "1.1.14"
lombok = "1.18.32"

# Testcontainers BOM은 그대로 두되,
# ✅ LocalStack 모듈만 별도 버전 별칭으로 '명시 고정'한다.
testcontainersBom = "1.19.7"
testcontainers = "1.19.7"

embeddedRedis = "1.4.3"
mariaDB4j = "2.5.3"
mariadbDriver = "3.3.3"
dynamodbLocal = "1.21.0"
sqlite4javaCore = "1.0.392"
h2 = "2.2.224"

# ✅ Spring Cloud Gateway 개별 버전 (BOM 미사용 시에도 확정)
springCloudGateway = "4.1.0"

[plugins]
springBoot = { id = "org.springframework.boot", version.ref = "springBoot" }
springDepMgmt = { id = "io.spring.dependency-management", version.ref = "springDepMgmt" }
asciidoctor = { id = "org.asciidoctor.jvm.convert", version = "3.3.2" }

[libraries]
# Lombok
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }

# Spring Boot / Spring
springBootStarter = { module = "org.springframework.boot:spring-boot-starter" }
springBootStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web" }
springBootStarterWebflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }   # ✅ 추가 (web 모듈용)
springBootStarterAop = { module = "org.springframework.boot:spring-boot-starter-aop" }
springBootStarterJdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc" }
springBootStarterDataJpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
springBootStarterValidation = { module = "org.springframework.boot:spring-boot-starter-validation" }
springBootStarterSecurity = { module = "org.springframework.boot:spring-boot-starter-security" }
springBootStarterTest = { module = "org.springframework.boot:spring-boot-starter-test" }
springBootConfigProcessor = { module = "org.springframework.boot:spring-boot-configuration-processor" }
springBootAutoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure" }

# ✅ 추가: Spring Data Redis (RedisTemplate 자동 구성)
springBootStarterDataRedis = { module = "org.springframework.boot:spring-boot-starter-data-redis" }

# Spring for Apache Kafka
springKafka = { module = "org.springframework.kafka:spring-kafka" }                               # ✅ 추가 (kafka 모듈용)

# Spring Cloud Gateway
springCloudGateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway", version.ref = "springCloudGateway" }

# DB / Drivers
mysqlDriver = { module = "com.mysql:mysql-connector-j", version.ref = "mysqlDriver" }
mariadbDriver = { module = "org.mariadb.jdbc:mariadb-java-client", version.ref = "mariadbDriver" }
awsMysqlJdbc = { module = "software.aws.rds:aws-mysql-jdbc", version.ref = "awsMysqlJdbc" }

# AWS SDK v2
awsBomV2 = { module = "software.amazon.awssdk:bom", version = "2.25.10" }
awsSecretsManager = { module = "software.amazon.awssdk:secretsmanager" }
awsAuth = { module = "software.amazon.awssdk:auth" }
awsRegions = { module = "software.amazon.awssdk:regions" }
awsDynamodb = { module = "software.amazon.awssdk:dynamodb" }
awsDynamodbEnhanced = { module = "software.amazon.awssdk:dynamodb-enhanced" }

# ✅ AWS SDK v1 (S3) — s3 모듈에서 사용
awsS3v1 = { module = "com.amazonaws:aws-java-sdk-s3", version = "1.12.530" }

# Querydsl
querydslCore = { module = "com.querydsl:querydsl-core", version.ref = "querydsl" }
querydslJpaJakarta = { module = "com.querydsl:querydsl-jpa", version.ref = "querydsl" }

# Jakarta / Servlet
jakartaPersistenceApi = { module = "jakarta.persistence:jakarta.persistence-api", version = "3.1.0" }
jakartaAnnotationApi = { module = "jakarta.annotation:jakarta.annotation-api", version = "2.1.1" }
jakartaServlet = { module = "jakarta.servlet:jakarta.servlet-api", version = "6.0.0" }

# JWT
jjwtApi = { module = "io.jsonwebtoken:jjwt-api", version = "0.11.5" }
jjwtImpl = { module = "io.jsonwebtoken:jjwt-impl", version = "0.11.5" }
jjwtJackson = { module = "io.jsonwebtoken:jjwt-jackson", version = "0.11.5" }

# Utils
guava = { module = "com.google.guava:guava", version.ref = "guava" }
tsid = { module = "com.github.f4b6a3:tsid-creator", version.ref = "tsid" }
jacksonJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jacksonJsr310" }
commonsPool2 = { module = "org.apache.commons:commons-pool2", version = "2.12.0" }

# Redis / Redisson
redisson = { module = "org.redisson:redisson-spring-boot-starter", version = "3.27.2" }
lettuce = { module = "io.lettuce:lettuce-core", version = "6.3.2.RELEASE" }
embeddedRedis = { module = "com.github.codemonstur:embedded-redis", version.ref = "embeddedRedis" }

# Testcontainers
# 나머지는 BOM에 맡기되,
testcontainers = { module = "org.testcontainers:testcontainers" }
testcontainersJunit = { module = "org.testcontainers:junit-jupiter" }
testcontainersJdbc = { module = "org.testcontainers:jdbc" }
testcontainersMysql = { module = "org.testcontainers:mysql" }
# ✅ LocalStack만 '명시 버전'을 사용해서 컴파일 타임에 반드시 들어오도록 한다.
testcontainersLocalstack = { module = "org.testcontainers:localstack", version.ref = "testcontainers" }
testcontainersBom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainersBom" }
mockitoBom = { module = "org.mockito:mockito-bom", version = "5.12.0" }

# DBs for test
h2 = { module = "com.h2database:h2", version.ref = "h2" }

# Crypto
argon2 = { module = "de.mkammerer:argon2-jvm", version = "2.11" }
